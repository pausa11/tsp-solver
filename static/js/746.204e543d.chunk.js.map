{"version":3,"file":"static/js/746.204e543d.chunk.js","mappings":"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","sources":["workers/tspsolverACOWorker.worker.js","../webpack/bootstrap","../webpack/runtime/amd define","../webpack/runtime/amd options","../webpack/runtime/chunk loaded","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/global","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/node module decorator","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["/* eslint-disable no-restricted-globals */\r\nimport * as math from 'mathjs';\r\nimport { Graph } from 'graphlib';\r\nimport PriorityQueue from 'priorityqueuejs';\r\n\r\nclass AntColony {\r\n    constructor(distanceMatrix, numAnts = 100, iterations = 50, evaporationRate = 0.2, alpha = 1, beta = 3) {\r\n        this.distanceMatrix = distanceMatrix;\r\n        this.numCities = distanceMatrix.length;\r\n        this.numAnts = numAnts;\r\n        this.iterations = iterations;\r\n        this.evaporationRate = evaporationRate;\r\n        this.alpha = alpha;\r\n        this.beta = beta;\r\n        this.pheromoneMatrix = Array(this.numCities).fill().map(() => \r\n            Array(this.numCities).fill(1.0 / this.numCities)\r\n        );\r\n        this.bestTourLength = Infinity;\r\n        this.bestTour = null;\r\n    }\r\n\r\n    runIteration(startCity, visitedNodes) {\r\n        let bestIterationLength = Infinity;\r\n        let bestIterationTour = null;\r\n\r\n        // Para cada hormiga\r\n        for (let ant = 0; ant < this.numAnts; ant++) {\r\n            const tour = this.constructSolution(startCity, visitedNodes);\r\n            const tourLength = this.calculateTourLength(tour);\r\n\r\n            if (tourLength < bestIterationLength) {\r\n                bestIterationLength = tourLength;\r\n                bestIterationTour = [...tour];\r\n            }\r\n\r\n            if (tourLength < this.bestTourLength) {\r\n                this.bestTourLength = tourLength;\r\n                this.bestTour = [...tour];\r\n            }\r\n        }\r\n\r\n        this.updatePheromones(bestIterationTour, bestIterationLength);\r\n        return bestIterationLength;\r\n    }\r\n\r\n    constructSolution(startCity, visitedNodes) {\r\n        const available = new Array(this.numCities).fill(true);\r\n        visitedNodes.forEach(node => available[node] = false);\r\n        \r\n        const tour = [startCity];\r\n        let currentCity = startCity;\r\n\r\n        while (tour.length < this.numCities - visitedNodes.length + 1) {\r\n            const nextCity = this.selectNextCity(currentCity, available);\r\n            tour.push(nextCity);\r\n            available[nextCity] = false;\r\n            currentCity = nextCity;\r\n        }\r\n\r\n        return tour;\r\n    }\r\n\r\n    selectNextCity(currentCity, available) {\r\n        const probabilities = [];\r\n        let totalProbability = 0;\r\n\r\n        for (let city = 0; city < this.numCities; city++) {\r\n            if (available[city]) {\r\n                const pheromone = Math.pow(this.pheromoneMatrix[currentCity][city], this.alpha);\r\n                const distance = 1.0 / Math.pow(this.distanceMatrix[currentCity][city], this.beta);\r\n                const probability = pheromone * distance;\r\n                probabilities.push({ city, probability });\r\n                totalProbability += probability;\r\n            }\r\n        }\r\n\r\n        let random = Math.random() * totalProbability;\r\n        let sum = 0;\r\n\r\n        for (const { city, probability } of probabilities) {\r\n            sum += probability;\r\n            if (random <= sum) {\r\n                return city;\r\n            }\r\n        }\r\n\r\n        return probabilities[probabilities.length - 1].city;\r\n    }\r\n\r\n    calculateTourLength(tour) {\r\n        let length = 0;\r\n        for (let i = 0; i < tour.length - 1; i++) {\r\n            length += this.distanceMatrix[tour[i]][tour[i + 1]];\r\n        }\r\n        return length;\r\n    }\r\n\r\n    updatePheromones(tour, tourLength) {\r\n        // Evaporación\r\n        for (let i = 0; i < this.numCities; i++) {\r\n            for (let j = 0; j < this.numCities; j++) {\r\n                this.pheromoneMatrix[i][j] *= (1 - this.evaporationRate);\r\n            }\r\n        }\r\n\r\n        // Depósito de feromonas\r\n        const pheromoneDeposit = 1.0 / tourLength;\r\n        for (let i = 0; i < tour.length - 1; i++) {\r\n            const from = tour[i];\r\n            const to = tour[i + 1];\r\n            this.pheromoneMatrix[from][to] += pheromoneDeposit;\r\n            this.pheromoneMatrix[to][from] += pheromoneDeposit;\r\n        }\r\n    }\r\n}\r\n\r\nclass TSP_Solver_AStar {\r\n    constructor(locations) {\r\n        this.locations = locations;\r\n        this.graph = this.createCompleteGraph(locations);\r\n        this.startNode = 0;\r\n        this.totalNodes = locations.length;\r\n        this.memoizedHeuristics = new Map();\r\n        this.timeLimit = 99000;\r\n        this.startTime = Date.now();\r\n        this.bestSolution = null;\r\n        this.lastUpdate = Date.now();\r\n        this.distanceMatrix = this.createDistanceMatrix();\r\n        this.antColony = new AntColony(this.distanceMatrix);\r\n        \r\n        this.initialVisited = new Array(this.totalNodes).fill(false);\r\n        this.initialVisited[this.startNode] = true;\r\n    }\r\n\r\n    createDistanceMatrix() {\r\n        const matrix = Array(this.totalNodes).fill().map(() => Array(this.totalNodes));\r\n        for (let i = 0; i < this.totalNodes; i++) {\r\n            for (let j = i + 1; j < this.totalNodes; j++) {\r\n                const dist = math.distance(\r\n                    [this.locations[i].x, this.locations[i].y],\r\n                    [this.locations[j].x, this.locations[j].y]\r\n                );\r\n                matrix[i][j] = dist;\r\n                matrix[j][i] = dist;\r\n            }\r\n            matrix[i][i] = 0;\r\n        }\r\n        return matrix;\r\n    }\r\n\r\n    createCompleteGraph(locations) {\r\n        const graph = new Graph({ directed: false });\r\n        const numLocations = locations.length;\r\n\r\n        for (let i = 0; i < numLocations; i++) {\r\n            for (let j = i + 1; j < numLocations; j++) {\r\n                const dist = math.distance(\r\n                    [locations[i].x, locations[i].y],\r\n                    [locations[j].x, locations[j].y]\r\n                );\r\n                graph.setEdge(i, j, dist);\r\n            }\r\n        }\r\n        return graph;\r\n    }\r\n\r\n    getDistance(from, to) {\r\n        return this.distanceMatrix[from][to];\r\n    }\r\n\r\n    visitedToString(visited, currentNode) {\r\n        return `${currentNode}-${visited.join('')}`;\r\n    }\r\n\r\n    getVisitedNodes(visited) {\r\n        return visited.reduce((acc, v, i) => {\r\n            if (v) acc.push(i);\r\n            return acc;\r\n        }, []);\r\n    }\r\n\r\n    calculateACOHeuristic(currentNode, visited) {\r\n        const memoKey = this.visitedToString(visited, currentNode);\r\n        const cached = this.memoizedHeuristics.get(memoKey);\r\n        if (cached !== undefined) {\r\n            return cached;\r\n        }\r\n\r\n        const visitedNodes = this.getVisitedNodes(visited);\r\n        const heuristicValue = this.antColony.runIteration(currentNode, visitedNodes);\r\n        \r\n        this.memoizedHeuristics.set(memoKey, heuristicValue);\r\n        return heuristicValue;\r\n    }\r\n\r\n    countVisited(visited) {\r\n        return visited.reduce((count, v) => count + (v ? 1 : 0), 0);\r\n    }\r\n\r\n    updateBestSolution(solution) {\r\n        this.bestSolution = solution;\r\n        const currentTime = Date.now();\r\n        if (currentTime - this.lastUpdate > 1000) {\r\n            this.lastUpdate = currentTime;\r\n            console.log(`Nueva mejor solución encontrada: ${solution.totalCost}`);\r\n        }\r\n    }\r\n\r\n    findInitialSolution() {\r\n        const visited = new Array(this.totalNodes).fill(false);\r\n        visited[this.startNode] = true;\r\n        let currentNode = this.startNode;\r\n        const path = [this.startNode];\r\n        let totalCost = 0;\r\n        \r\n        for (let i = 1; i < this.totalNodes; i++) {\r\n            let nearestNode = -1;\r\n            let minDistance = Infinity;\r\n            \r\n            for (let j = 0; j < this.totalNodes; j++) {\r\n                if (!visited[j]) {\r\n                    const distance = this.getDistance(currentNode, j);\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestNode = j;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            visited[nearestNode] = true;\r\n            path.push(nearestNode);\r\n            totalCost += minDistance;\r\n            currentNode = nearestNode;\r\n        }\r\n        \r\n        totalCost += this.getDistance(currentNode, this.startNode);\r\n        path.push(this.startNode);\r\n        \r\n        return {\r\n            path: path,\r\n            totalCost: totalCost\r\n        };\r\n    }\r\n\r\n    solve() {\r\n        this.bestSolution = this.findInitialSolution();\r\n        console.log(`Solución inicial encontrada: ${this.bestSolution.totalCost}`);\r\n\r\n        const openSet = new PriorityQueue((a, b) => b.f - a.f);\r\n        \r\n        const startState = {\r\n            currentNode: this.startNode,\r\n            visited: [...this.initialVisited],\r\n            path: [this.startNode],\r\n            g: 0,\r\n            h: this.calculateACOHeuristic(this.startNode, this.initialVisited),\r\n            f: 0\r\n        };\r\n        startState.f = startState.g + startState.h;\r\n\r\n        openSet.enq(startState);\r\n        let nodesExplored = 0;\r\n        let lastProgressUpdate = Date.now();\r\n\r\n        while (!openSet.isEmpty()) {\r\n            const currentTime = Date.now();\r\n            if (currentTime - this.startTime > this.timeLimit) {\r\n                console.log(`Tiempo límite alcanzado. Nodos explorados: ${nodesExplored}`);\r\n                console.log(`Mejor solución encontrada: ${this.bestSolution.totalCost}`);\r\n                return this.bestSolution;\r\n            }\r\n\r\n            if (currentTime - lastProgressUpdate > 1000) {\r\n                console.log(`Progreso: ${nodesExplored} nodos explorados, mejor solución: ${this.bestSolution.totalCost}`);\r\n                lastProgressUpdate = currentTime;\r\n            }\r\n\r\n            const state = openSet.deq();\r\n            nodesExplored++;\r\n\r\n            if (this.countVisited(state.visited) === this.totalNodes) {\r\n                const returnCost = this.getDistance(state.currentNode, this.startNode);\r\n                const totalCost = state.g + returnCost;\r\n                const totalPath = [...state.path, this.startNode];\r\n\r\n                if (!this.bestSolution || totalCost < this.bestSolution.totalCost) {\r\n                    this.updateBestSolution({\r\n                        path: totalPath,\r\n                        totalCost: totalCost\r\n                    });\r\n                }\r\n                continue;\r\n            }\r\n\r\n            if (this.bestSolution && state.f >= this.bestSolution.totalCost * 1.1) {\r\n                continue;\r\n            }\r\n\r\n            for (let neighbor = 0; neighbor < this.totalNodes; neighbor++) {\r\n                if (!state.visited[neighbor]) {\r\n                    const newVisited = [...state.visited];\r\n                    newVisited[neighbor] = true;\r\n                    \r\n                    const gCost = state.g + this.getDistance(state.currentNode, neighbor);\r\n\r\n                    if (this.bestSolution && gCost >= this.bestSolution.totalCost) {\r\n                        continue;\r\n                    }\r\n\r\n                    const hCost = this.calculateACOHeuristic(neighbor, newVisited);\r\n                    const fCost = gCost + hCost;\r\n\r\n                    if (this.bestSolution && fCost >= this.bestSolution.totalCost) {\r\n                        continue;\r\n                    }\r\n\r\n                    openSet.enq({\r\n                        currentNode: neighbor,\r\n                        visited: newVisited,\r\n                        path: [...state.path, neighbor],\r\n                        g: gCost,\r\n                        h: hCost,\r\n                        f: fCost\r\n                    });\r\n                }\r\n            }\r\n\r\n            if (nodesExplored % 10000 === 0) {\r\n                if (this.memoizedHeuristics.size > 1000000) {\r\n                    this.memoizedHeuristics.clear();\r\n                }\r\n            }\r\n        }\r\n\r\n        return this.bestSolution;\r\n    }\r\n}\r\n\r\n// function solve_tspACO(coords) {\r\n//   console.log('Iniciando TSP con A* y heurística ACO');\r\n//   console.log(`Número de ciudades: ${coords.length}`);\r\n//   const startTime = Date.now();\r\n//   const solver = new TSP_Solver_AStar(coords);\r\n//   const solution = solver.solve();\r\n//   const endTime = Date.now();\r\n//   const timeElapsed = (endTime - startTime) / 1000;\r\n//   console.log('\\nResultados finales:');\r\n//   console.log(`Costo total: ${solution.totalCost}`);\r\n//   console.log(`Tiempo total: ${timeElapsed} segundos`);\r\n//   console.log(`Ruta: ${solution.path.join(' -> ')}`);\r\n//   return solution;\r\n// }   \r\n\r\nself.onmessage = function(e) {\r\n    const { type, data } = e.data;\r\n    \r\n    if (type === 'solve') {\r\n        try {\r\n            console.log('Worker: Starting TSP solution');\r\n            const solver = new TSP_Solver_AStar(data);\r\n            const solution = solver.solve();\r\n            \r\n            // Enviar actualizaciones de progreso\r\n            const progressUpdate = {\r\n                type: 'progress',\r\n                data: {\r\n                    nodesExplored: solver.nodesExplored,\r\n                    currentBest: solver.bestSolution?.totalCost\r\n                }\r\n            };\r\n            self.postMessage(progressUpdate);\r\n            \r\n            // Enviar la solución final\r\n            self.postMessage({\r\n                type: 'solution',\r\n                data: solution\r\n            });\r\n        } catch (error) {\r\n            self.postMessage({\r\n                type: 'error',\r\n                data: error.message\r\n            });\r\n        }\r\n    }\r\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [133], () => (__webpack_require__(3745)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","__webpack_require__.amdD = function () {\n\tthrow new Error('define cannot be used indirect');\n};","__webpack_require__.amdO = {};","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"c2e388aa\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/tsp-solver/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t746: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunktsp\"] = self[\"webpackChunktsp\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(133).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["AntColony","constructor","distanceMatrix","numAnts","arguments","length","undefined","iterations","evaporationRate","alpha","beta","this","numCities","pheromoneMatrix","Array","fill","map","bestTourLength","Infinity","bestTour","runIteration","startCity","visitedNodes","bestIterationLength","bestIterationTour","ant","tour","constructSolution","tourLength","calculateTourLength","updatePheromones","available","forEach","node","currentCity","nextCity","selectNextCity","push","probabilities","totalProbability","city","probability","Math","pow","random","sum","i","j","pheromoneDeposit","from","to","TSP_Solver_AStar","locations","graph","createCompleteGraph","startNode","totalNodes","memoizedHeuristics","Map","timeLimit","startTime","Date","now","bestSolution","lastUpdate","createDistanceMatrix","antColony","initialVisited","matrix","dist","math","x","y","Graph","directed","numLocations","setEdge","getDistance","visitedToString","visited","currentNode","join","getVisitedNodes","reduce","acc","v","calculateACOHeuristic","memoKey","cached","get","heuristicValue","set","countVisited","count","updateBestSolution","solution","currentTime","console","log","totalCost","findInitialSolution","path","nearestNode","minDistance","distance","solve","openSet","PriorityQueue","a","b","f","startState","g","h","enq","nodesExplored","lastProgressUpdate","isEmpty","state","deq","neighbor","newVisited","gCost","hCost","fCost","size","clear","returnCost","totalPath","self","onmessage","e","type","data","_solver$bestSolution","solver","progressUpdate","currentBest","postMessage","error","message","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","id","loaded","__webpack_modules__","call","m","__webpack_exports__","O","amdD","Error","amdO","deferred","result","chunkIds","fn","priority","notFulfilled","fulfilled","Object","keys","every","key","splice","r","n","getter","__esModule","d","definition","o","defineProperty","enumerable","chunkId","Promise","all","promises","u","miniCssF","globalThis","Function","window","obj","prop","prototype","hasOwnProperty","nmd","paths","children","p","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop","next","then"],"sourceRoot":""}