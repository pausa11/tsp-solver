(()=>{var t={4228:(t,i,e)=>{"use strict";var s=e(6110),o=e(9207),n=e(2364),r=e.n(n);class a{constructor(t){this.parent=Array.from({length:t},((t,i)=>i)),this.rank=Array(t).fill(0)}find(t){return this.parent[t]!==t&&(this.parent[t]=this.find(this.parent[t])),this.parent[t]}union(t,i){const e=this.find(t),s=this.find(i);e!==s&&(this.rank[e]<this.rank[s]?this.parent[e]=s:this.rank[e]>this.rank[s]?this.parent[s]=e:(this.parent[s]=e,this.rank[e]++))}}class h{constructor(t){let i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:10,e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:5,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.1,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,n=arguments.length>5&&void 0!==arguments[5]?arguments[5]:2;this.distanceMatrix=t,this.numCities=t.length,this.numAnts=i,this.iterations=e,this.evaporationRate=s,this.alpha=o,this.beta=n,this.pheromoneMatrix=Array(this.numCities).fill().map((()=>Array(this.numCities).fill(1/this.numCities))),this.bestTourLength=1/0,this.bestTour=null}runIteration(t,i){let e=1/0;for(let s=0;s<this.numAnts;s++){const s=this.constructSolution(t,i),o=this.calculateTourLength(s);o<e&&(e=o),o<this.bestTourLength&&(this.bestTourLength=o,this.bestTour=[...s])}return this.updatePheromones(this.bestTour,this.bestTourLength),e}constructSolution(t,i){const e=new Array(this.numCities).fill(!0);i.forEach((t=>e[t]=!1));const s=[t];let o=t;for(;s.length<this.numCities-i.length+1;){const t=this.selectNextCity(o,e);s.push(t),e[t]=!1,o=t}return s}selectNextCity(t,i){const e=[];let s=0;for(let r=0;r<this.numCities;r++)if(i[r]){const i=Math.pow(this.pheromoneMatrix[t][r],this.alpha)*(1/Math.pow(this.distanceMatrix[t][r],this.beta));e.push({city:r,probability:i}),s+=i}let o=Math.random()*s,n=0;for(const{city:r,probability:a}of e)if(n+=a,o<=n)return r;return e[e.length-1].city}calculateTourLength(t){let i=0;for(let e=0;e<t.length-1;e++)i+=this.distanceMatrix[t[e]][t[e+1]];return i}updatePheromones(t,i){for(let s=0;s<this.numCities;s++)for(let t=0;t<this.numCities;t++)this.pheromoneMatrix[s][t]*=1-this.evaporationRate;const e=1/i;for(let s=0;s<t.length-1;s++){const i=t[s],o=t[s+1];this.pheromoneMatrix[i][o]+=e,this.pheromoneMatrix[o][i]+=e}}}class l{constructor(t){this.distanceMatrix=t,this.numCities=t.length,this.antColony=new h(t),this.weightMST=.6,this.weightACO=.4}calculateMSTCost(t){if(t.length<=1)return 0;const i=[],e=t.length;for(let a=0;a<e;a++){const s=t[a];for(let o=a+1;o<e;o++){const e=t[o];i.push({v:s,w:e,weight:this.distanceMatrix[s][e]})}}i.sort(((t,i)=>t.weight-i.weight));const s=new a(this.numCities);let o=0,n=0;const r=e-1;for(const a of i)if(s.find(a.v)!==s.find(a.w)&&(o+=a.weight,s.union(a.v,a.w),n++,n===r))break;return o}calculateACOCost(t,i){return this.antColony.runIteration(t,i)}getMinUnvisitedDistance(t,i){let e=1/0;for(const s of i){const i=this.distanceMatrix[t][s];i<e&&(e=i)}return e}calculateHybridHeuristic(t,i){const e=i.reduce(((t,i,e)=>(i&&t.push(e),t)),[]),s=i.reduce(((t,i,e)=>(i||t.push(e),t)),[]);if(0===s.length)return 0;const o=this.calculateMSTCost(s)+this.getMinUnvisitedDistance(t,s),n=this.calculateACOCost(t,e);return this.weightMST*o+this.weightACO*n}adjustWeights(t,i){t&&!i?(this.weightMST=Math.min(.8,this.weightMST+.1),this.weightACO=1-this.weightMST):!t&&i&&(this.weightACO=Math.min(.8,this.weightACO+.1),this.weightMST=1-this.weightACO)}}class c{constructor(t){this.locations=t,this.graph=this.createCompleteGraph(t),this.startNode=0,this.totalNodes=t.length,this.memoizedHeuristics=new Map,this.timeLimit=99e3,this.startTime=Date.now(),this.bestSolution=null,this.lastUpdate=Date.now(),this.distanceMatrix=this.createDistanceMatrix(),this.hybridHeuristic=new l(this.distanceMatrix),this.initialVisited=new Array(this.totalNodes).fill(!1),this.initialVisited[this.startNode]=!0,this.mstSuccesses=0,this.acoSuccesses=0,this.totalAttempts=0}createDistanceMatrix(){const t=Array(this.totalNodes).fill().map((()=>Array(this.totalNodes)));for(let i=0;i<this.totalNodes;i++){for(let e=i+1;e<this.totalNodes;e++){const o=s.IoC([this.locations[i].x,this.locations[i].y],[this.locations[e].x,this.locations[e].y]);t[i][e]=o,t[e][i]=o}t[i][i]=0}return t}createCompleteGraph(t){const i=new o.Graph({directed:!1}),e=t.length;for(let o=0;o<e;o++)for(let n=o+1;n<e;n++){const e=s.IoC([t[o].x,t[o].y],[t[n].x,t[n].y]);i.setEdge(o,n,e)}return i}getDistance(t,i){return this.distanceMatrix[t][i]}visitedToString(t,i){return`${i}-${t.join("")}`}calculateHeuristic(t,i){const e=this.visitedToString(i,t),s=this.memoizedHeuristics.get(e);if(void 0!==s)return s;const o=this.hybridHeuristic.calculateHybridHeuristic(t,i);return this.memoizedHeuristics.set(e,o),this.totalAttempts++,this.totalAttempts%100===0&&this.hybridHeuristic.adjustWeights(this.mstSuccesses/this.totalAttempts>.5,this.acoSuccesses/this.totalAttempts>.5),o}countVisited(t){return t.reduce(((t,i)=>t+(i?1:0)),0)}updateBestSolution(t){this.bestSolution=t;const i=Date.now();i-this.lastUpdate>1e3&&(this.lastUpdate=i,console.log(`Nueva mejor soluci\xf3n encontrada: ${t.totalCost}`),console.log(`Pesos actuales - MST: ${this.hybridHeuristic.weightMST.toFixed(2)}, ACO: ${this.hybridHeuristic.weightACO.toFixed(2)}`))}findInitialSolution(){const t=new Array(this.totalNodes).fill(!1);t[this.startNode]=!0;let i=this.startNode;const e=[this.startNode];let s=0;for(let o=1;o<this.totalNodes;o++){let o=-1,n=1/0;for(let e=0;e<this.totalNodes;e++)if(!t[e]){const t=this.getDistance(i,e);t<n&&(n=t,o=e)}t[o]=!0,e.push(o),s+=n,i=o}return s+=this.getDistance(i,this.startNode),e.push(this.startNode),{path:e,totalCost:s}}solve(){this.bestSolution=this.findInitialSolution(),console.log(`Soluci\xf3n inicial encontrada: ${this.bestSolution.totalCost}`);const t=new(r())(((t,i)=>i.f-t.f)),i={currentNode:this.startNode,visited:[...this.initialVisited],path:[this.startNode],g:0,h:this.calculateHeuristic(this.startNode,this.initialVisited),f:0};i.f=i.g+i.h,t.enq(i);let e=0,s=Date.now();for(;!t.isEmpty();){const i=Date.now();if(i-this.startTime>this.timeLimit)return console.log("Tiempo l\xedmite alcanzado"),this.bestSolution;i-s>5e3&&(console.log(`Nodos explorados: ${e}`),s=i);const o=t.deq();if(e++,this.countVisited(o.visited)!==this.totalNodes){for(let i=0;i<this.totalNodes;i++){if(o.visited[i])continue;const e=this.getDistance(o.currentNode,i),s=o.g+e;if(this.bestSolution&&s>=this.bestSolution.totalCost)continue;const n=[...o.visited];n[i]=!0;const r=this.calculateHeuristic(i,n),a=s+r,h={currentNode:i,visited:n,path:[...o.path,i],g:s,h:r,f:a};(!this.bestSolution||a<this.bestSolution.totalCost)&&t.enq(h)}e%1e3===0&&this.memoizedHeuristics.clear()}else{const t=o.g+this.getDistance(o.currentNode,this.startNode),i=[...o.path,this.startNode];(!this.bestSolution||t<this.bestSolution.totalCost)&&this.updateBestSolution({path:i,totalCost:t})}}return console.log(`B\xfasqueda completada. Nodos explorados: ${e}`),this.bestSolution}}self.onmessage=function(t){const{type:i,data:e}=t.data;if("solve"===i)try{var s;console.log("Worker: Starting TSP solution");const t=new c(e),i=t.solve(),o={type:"progress",data:{nodesExplored:t.nodesExplored,currentBest:null===(s=t.bestSolution)||void 0===s?void 0:s.totalCost}};self.postMessage(o),self.postMessage({type:"solution",data:i})}catch(o){self.postMessage({type:"error",data:o.message})}}},1234:()=>{}},i={};function e(s){var o=i[s];if(void 0!==o)return o.exports;var n=i[s]={id:s,loaded:!1,exports:{}};return t[s].call(n.exports,n,n.exports,e),n.loaded=!0,n.exports}e.m=t,e.x=()=>{var t=e.O(void 0,[133],(()=>e(4228)));return t=e.O(t)},e.amdD=function(){throw new Error("define cannot be used indirect")},e.amdO={},(()=>{var t=[];e.O=(i,s,o,n)=>{if(!s){var r=1/0;for(c=0;c<t.length;c++){s=t[c][0],o=t[c][1],n=t[c][2];for(var a=!0,h=0;h<s.length;h++)(!1&n||r>=n)&&Object.keys(e.O).every((t=>e.O[t](s[h])))?s.splice(h--,1):(a=!1,n<r&&(r=n));if(a){t.splice(c--,1);var l=o();void 0!==l&&(i=l)}}return i}n=n||0;for(var c=t.length;c>0&&t[c-1][2]>n;c--)t[c]=t[c-1];t[c]=[s,o,n]}})(),e.n=t=>{var i=t&&t.__esModule?()=>t.default:()=>t;return e.d(i,{a:i}),i},e.d=(t,i)=>{for(var s in i)e.o(i,s)&&!e.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:i[s]})},e.f={},e.e=t=>Promise.all(Object.keys(e.f).reduce(((i,s)=>(e.f[s](t,i),i)),[])),e.u=t=>"static/js/"+t+".c2e388aa.chunk.js",e.miniCssF=t=>{},e.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"===typeof window)return window}}(),e.o=(t,i)=>Object.prototype.hasOwnProperty.call(t,i),e.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),e.p="/tsp-solver/",(()=>{var t={613:1};e.f.i=(i,s)=>{t[i]||importScripts(e.p+e.u(i))};var i=self.webpackChunktsp=self.webpackChunktsp||[],s=i.push.bind(i);i.push=i=>{var o=i[0],n=i[1],r=i[2];for(var a in n)e.o(n,a)&&(e.m[a]=n[a]);for(r&&r(e);o.length;)t[o.pop()]=1;s(i)}})(),(()=>{var t=e.x;e.x=()=>e.e(133).then(t)})();e.x()})();
//# sourceMappingURL=613.f320904f.chunk.js.map